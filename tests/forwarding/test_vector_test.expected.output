================================================================================
CheckForTestVectorFailure Test: Packet is expected to be forwarded (out of one
of several acceptable ports), but gets dropped.
================================================================================
Value of: actual gpins::SwitchOutput
Expected: input {
  type: DATAPLANE
  packet {
    port: "1"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:08:02:08:10:40"
          ethernet_source: "40:04:10:04:04:20"
          ethertype: "0x86dd"
        }
      }
      headers {
        ipv6_header {
          version: "0x6"
          dscp: "0x00"
          ecn: "0x0"
          flow_label: "0x00000"
          payload_length: "0x00ee"
          next_header: "0x3a"
          hop_limit: "0x80"
          ipv6_source: "fe80::"
          ipv6_destination: "2002:a05:6860:4f00::"
        }
      }
      headers {
        icmp_header {
          type: "0x00"
          code: "0x00"
          checksum: "0x1461"
          rest_of_header: "0x00000000"
        }
      }
      payload: "test packet"
    }
  }
}
acceptable_outputs {
  packets {
    port: "8"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:08:02:08:10:40"
          ethernet_source: "40:04:10:04:04:20"
          ethertype: "0x86dd"
        }
      }
      headers {
        ipv6_header {
          version: "0x6"
          dscp: "0x00"
          ecn: "0x0"
          flow_label: "0x00000"
          payload_length: "0x00ee"
          next_header: "0x3a"
          hop_limit: "0x80"
          ipv6_source: "fe80::"
          ipv6_destination: "2002:a05:6860:4f00::"
        }
      }
      headers {
        icmp_header {
          type: "0x00"
          code: "0x00"
          checksum: "0x1461"
          rest_of_header: "0x00000000"
        }
      }
      payload: "test packet"
    }
  }
}
acceptable_outputs {
  packets {
    port: "12"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:08:02:08:10:40"
          ethernet_source: "40:04:10:04:04:20"
          ethertype: "0x86dd"
        }
      }
      headers {
        ipv6_header {
          version: "0x6"
          dscp: "0x00"
          ecn: "0x0"
          flow_label: "0x00000"
          payload_length: "0x00ee"
          next_header: "0x3a"
          hop_limit: "0x80"
          ipv6_source: "fe80::"
          ipv6_destination: "2002:a05:6860:4f00::"
        }
      }
      headers {
        icmp_header {
          type: "0x00"
          code: "0x00"
          checksum: "0x1461"
          rest_of_header: "0x00000000"
        }
      }
      payload: "test packet"
    }
  }
}
acceptable_outputs {
  packets {
    port: "16"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:08:02:08:10:40"
          ethernet_source: "40:04:10:04:04:20"
          ethertype: "0x86dd"
        }
      }
      headers {
        ipv6_header {
          version: "0x6"
          dscp: "0x00"
          ecn: "0x0"
          flow_label: "0x00000"
          payload_length: "0x00ee"
          next_header: "0x3a"
          hop_limit: "0x80"
          ipv6_source: "fe80::"
          ipv6_destination: "2002:a05:6860:4f00::"
        }
      }
      headers {
        icmp_header {
          type: "0x00"
          code: "0x00"
          checksum: "0x1461"
          rest_of_header: "0x00000000"
        }
      }
      payload: "test packet"
    }
  }
}
acceptable_outputs {
  packets {
    port: "20"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:08:02:08:10:40"
          ethernet_source: "40:04:10:04:04:20"
          ethertype: "0x86dd"
        }
      }
      headers {
        ipv6_header {
          version: "0x6"
          dscp: "0x00"
          ecn: "0x0"
          flow_label: "0x00000"
          payload_length: "0x00ee"
          next_header: "0x3a"
          hop_limit: "0x80"
          ipv6_source: "fe80::"
          ipv6_destination: "2002:a05:6860:4f00::"
        }
      }
      headers {
        icmp_header {
          type: "0x00"
          code: "0x00"
          checksum: "0x1461"
          rest_of_header: "0x00000000"
        }
      }
      payload: "test packet"
    }
  }
}

  Actual:  (of type gpins::SwitchOutput), which compares to the acceptable outputs as follows:
- alternative 0 has wrong number of packets (actual: 0 expected: 1)
- alternative 1 has wrong number of packets (actual: 0 expected: 1)
- alternative 2 has wrong number of packets (actual: 0 expected: 1)
- alternative 3 has wrong number of packets (actual: 0 expected: 1)


================================================================================
CheckForTestVectorFailure Test: Submit-to-ingress packet is expected to be
forwarded and mirrored and punted, but doesn't get punted.
================================================================================
Value of: actual gpins::SwitchOutput
Expected: input {
  type: SUBMIT_TO_INGRESS
  packet {
    port: "1"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:08:02:08:10:40"
          ethernet_source: "40:04:10:04:04:20"
          ethertype: "0x86dd"
        }
      }
      headers {
        ipv6_header {
          version: "0x6"
          dscp: "0x00"
          ecn: "0x0"
          flow_label: "0x00000"
          payload_length: "0x00ee"
          next_header: "0x3a"
          hop_limit: "0x80"
          ipv6_source: "fe80::"
          ipv6_destination: "2002:a05:6860:4f00::"
        }
      }
      headers {
        icmp_header {
          type: "0x00"
          code: "0x00"
          checksum: "0x1461"
          rest_of_header: "0x00000000"
        }
      }
      payload: "test packet"
    }
  }
}
acceptable_outputs {
  packets {
    port: "1"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "00:1a:11:17:5f:80"
          ethernet_source: "00:02:03:04:05:06"
          ethertype: "0x0800"
        }
      }
      headers {
        ipv4_header {
          version: "0x4"
          ihl: "0x5"
          dscp: "0x00"
          ecn: "0x0"
          total_length: "0x0116"
          identification: "0x0000"
          flags: "0x2"
          fragment_offset: "0x0000"
          ttl: "0x40"
          protocol: "0x2f"
          checksum: "0xbe0b"
          ipv4_source: "10.206.196.0"
          ipv4_destination: "172.20.0.203"
        }
      }
      payload: "\000\000\210\276\002\n\000 \000\000\002*\020\200\000\005\010\000Ex\000\360\000\000\000\000\020\375\323\372\n\000\000\000\n5\300jtest packet"
    }
  }
  packets {
    port: "31"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "00:1a:11:17:5f:80"
          ethernet_source: "02:2a:10:00:00:06"
          ethertype: "0x0800"
        }
      }
      headers {
        ipv4_header {
          version: "0x4"
          ihl: "0x5"
          dscp: "0x1e"
          ecn: "0x0"
          total_length: "0x00f0"
          identification: "0x0000"
          flags: "0x0"
          fragment_offset: "0x0000"
          ttl: "0x0f"
          protocol: "0xfd"
          checksum: "0xd4fa"
          ipv4_source: "10.0.0.0"
          ipv4_destination: "10.53.192.106"
        }
      }
      payload: "test packet"
    }
  }
  packet_ins {
    metadata {
      ingress_port: "1"
      target_egress_port: "1"
    }
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:0a:00:20:00:00"
          ethernet_source: "02:2a:10:80:00:05"
          ethertype: "0x0800"
        }
      }
      headers {
        ipv4_header {
          version: "0x4"
          ihl: "0x5"
          dscp: "0x1e"
          ecn: "0x0"
          total_length: "0x00f0"
          identification: "0x0000"
          flags: "0x0"
          fragment_offset: "0x0000"
          ttl: "0x10"
          protocol: "0xfd"
          checksum: "0xd3fa"
          ipv4_source: "10.0.0.0"
          ipv4_destination: "10.53.192.106"
        }
      }
      payload: "test packet"
    }
  }
}

  Actual: packets {
  port: "1"
  parsed {
    headers {
      ethernet_header {
        ethernet_destination: "00:1a:11:17:5f:80"
        ethernet_source: "00:02:03:04:05:06"
        ethertype: "0x0800"
      }
    }
    headers {
      ipv4_header {
        version: "0x4"
        ihl: "0x5"
        dscp: "0x00"
        ecn: "0x0"
        total_length: "0x0116"
        identification: "0x0000"
        flags: "0x2"
        fragment_offset: "0x0000"
        ttl: "0x40"
        protocol: "0x2f"
        checksum: "0xbe0b"
        ipv4_source: "10.206.196.0"
        ipv4_destination: "172.20.0.203"
      }
    }
    payload: "\000\000\210\276\002\n\000 \000\000\002*\020\200\000\005\010\000Ex\000\360\000\000\000\000\020\375\323\372\n\000\000\000\n5\300jtest packet"
  }
}
packets {
  port: "31"
  parsed {
    headers {
      ethernet_header {
        ethernet_destination: "00:1a:11:17:5f:80"
        ethernet_source: "02:2a:10:00:00:06"
        ethertype: "0x0800"
      }
    }
    headers {
      ipv4_header {
        version: "0x4"
        ihl: "0x5"
        dscp: "0x1e"
        ecn: "0x0"
        total_length: "0x00f0"
        identification: "0x0000"
        flags: "0x0"
        fragment_offset: "0x0000"
        ttl: "0x0f"
        protocol: "0xfd"
        checksum: "0xd4fa"
        ipv4_source: "10.0.0.0"
        ipv4_destination: "10.53.192.106"
      }
    }
    payload: "test packet"
  }
}
 (of type gpins::SwitchOutput), which compares to the acceptable outputs as follows:
- alternative 0 has wrong number of packet ins (actual: 0 expected: 1)


================================================================================
CheckForTestVectorFailure Test: Packet gets forwarded with an unexpected
modification of a header field.
================================================================================
Value of: actual gpins::SwitchOutput
Expected: input {
  type: DATAPLANE
  packet {
    port: "1"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:03:04:05:06:07"
          ethernet_source: "00:01:02:03:04:05"
          ethertype: "0x0800"
        }
      }
      headers {
        ipv4_header {
          version: "0x4"
          ihl: "0x5"
          dscp: "0x1c"
          ecn: "0x0"
          total_length: "0x012e"
          identification: "0x0000"
          flags: "0x0"
          fragment_offset: "0x0000"
          ttl: "0x20"
          protocol: "0x11"
          checksum: "0x1b62"
          ipv4_source: "10.0.0.0"
          ipv4_destination: "10.206.105.32"
        }
      }
      headers {
        udp_header {
          source_port: "0x0000"
          destination_port: "0x0000"
          length: "0x011a"
          checksum: "0xad82"
        }
      }
      payload: "test packet"
    }
  }
}
acceptable_outputs {
  packets {
    port: "12"
    parsed {
      headers {
        ethernet_header {
          ethernet_destination: "02:03:04:05:06:07"
          ethernet_source: "00:01:02:03:04:05"
          ethertype: "0x0800"
        }
      }
      headers {
        ipv4_header {
          version: "0x4"
          ihl: "0x5"
          dscp: "0x1c"
          ecn: "0x0"
          total_length: "0x012e"
          identification: "0x0000"
          flags: "0x0"
          fragment_offset: "0x0000"
          ttl: "0x20"
          protocol: "0x11"
          checksum: "0x1b62"
          ipv4_source: "10.0.0.0"
          ipv4_destination: "10.206.105.32"
        }
      }
      headers {
        udp_header {
          source_port: "0x0000"
          destination_port: "0x0000"
          length: "0x011a"
          checksum: "0xad82"
        }
      }
      payload: "test packet"
    }
  }
}

  Actual: packets {
  port: "12"
  parsed {
    headers {
      ethernet_header {
        ethernet_destination: "02:03:04:05:06:07"
        ethernet_source: "00:01:02:03:04:05"
        ethertype: "0x0800"
      }
    }
    headers {
      ipv4_header {
        version: "0x4"
        ihl: "0x5"
        dscp: "0x00"
        ecn: "0x0"
        total_length: "0x012e"
        identification: "0x0000"
        flags: "0x0"
        fragment_offset: "0x0000"
        ttl: "0x20"
        protocol: "0x11"
        checksum: "0x1b62"
        ipv4_source: "10.0.0.0"
        ipv4_destination: "10.206.105.32"
      }
    }
    headers {
      udp_header {
        source_port: "0x0000"
        destination_port: "0x0000"
        length: "0x011a"
        checksum: "0xad82"
      }
    }
    payload: "test packet"
  }
}
 (of type gpins::SwitchOutput), which compares to the acceptable outputs as follows:
- alternative 0 has packet 0 with wrong header fields:
modified: headers[1].ipv4_header.dscp: "0x1c" -> "0x00"


