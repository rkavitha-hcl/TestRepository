// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package gpins;

import "p4_pdpi/packetlib/packetlib.proto";
import "sai_p4/instantiations/google/sai_pd.proto";

// Describes a packet from/to a given port.
// This proto contains both a parsed and unparsed (raw) representation
// of the packet. This makes it easier for humans to understand differences
// between packets. Both the parsed and unparsed representation must represent
// exactly the same packet.
message Packet {
  // required
  string port = 1;
  // required
  packetlib.Packet parsed = 2;
  // required
  string hex = 4;
}

// Describes a packet that was received by the switch and punted via packetio.
// This proto contains both a parsed and unparsed (raw) representation
// of the packet. This makes it easier for humans to understand differences
// between packets. Both the parsed and unparsed representation must represent
// exactly the same packet.
message PacketIn {
  sai.PacketIn.Metadata metadata = 1;
  packetlib.Packet parsed = 2;
  string hex = 4;
}

// The output of a switch, in response to an input.
message SwitchOutput {
  // The packets sent by the switch.
  repeated Packet packets = 1;
  // The packets punted by the switch using packet io.
  repeated PacketIn packet_ins = 2;
}

// The input to a switch.
message SwitchInput {
  enum Type {
    // Same as DATAPLANE.
    DEFAULT = 0;
    // Send a packet to the switch on the dataplane.
    DATAPLANE = 1;
    // Inject a packet into the switch using packet io.
    // The packet will be sent out of the given port without any pre-processing.
    PACKET_OUT = 2;
  }
  Type type = 1;
  // The packet that's being sent to the switch (required).
  Packet packet = 2;
}

// A test vector consists of an input that can be sent to a switch, along
// with the expected outputs from the switch in response to that input.
message TestVector {
  // The input to the switch (required).
  SwitchInput input = 1;
  // The expected output from the switch. There may be multiple acceptable
  // outputs, and only one of them needs to match.
  repeated SwitchOutput acceptable_outputs = 2;
}
