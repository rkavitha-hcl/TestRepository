# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("//p4_pdpi:pdgen.bzl", "p4_pd_proto")
load("@com_github_p4lang_p4c//:bazel/p4_library.bzl", "p4_library")
load("//gutil/embed_data:build_defs.bzl", "cc_embed_data")
load("//p4_pdpi/testing:diff_test.bzl", "cmd_diff_test", "diff_test")

package(
    default_visibility = ["//visibility:public"],
    licenses = ["notice"],
)

# -- PD proto for SDN controller -----------------------------------------------

proto_library(
    name = "sai_pd_proto",
    srcs = ["sai_pd.proto"],
    deps = [
        "@com_github_p4lang_p4runtime//:p4runtime_proto",
        "@com_google_googleapis//google/rpc:code_proto",
        "@com_google_googleapis//google/rpc:status_proto",
    ],
)

cc_proto_library(
    name = "sai_pd_cc_proto",
    deps = [":sai_pd_proto"],
)

build_test(
    name = "sai_pd_proto_test",
    targets = [
        ":sai_pd_proto",
        ":sai_pd_cc_proto",
    ],
)

proto_library(
    name = "linkqual_pd_proto",
    srcs = ["linkqual_pd.proto"],
    deps = [
        "@com_github_p4lang_p4runtime//:p4runtime_proto",
        "@com_google_googleapis//google/rpc:code_proto",
        "@com_google_googleapis//google/rpc:status_proto",
    ],
)

cc_proto_library(
    name = "linkqual_pd_cc_proto",
    deps = [":linkqual_pd_proto"],
)

build_test(
    name = "linkqual_pd_proto_test",
    targets = [
        ":linkqual_pd_proto",
        ":linkqual_pd_cc_proto",
    ],
)

# Ensures that the checked in and generated unioned P4Infos match.
# To update the checked in unioned P4Info:
#   blaze run :union_p4info_test -- --update
cmd_diff_test(
    name = "union_p4info_test",
    actual_cmd = "$(execpath {p4info_union}) --list_of_p4infos='$(location {middleblock_p4info}),$(location {wbb_p4info})'".format(
        p4info_union = "//p4_pdpi:p4info_union",
        middleblock_p4info = "middleblock.p4info.pb.txt",
        wbb_p4info = "wbb.p4info.pb.txt",
    ),
    expected = "//sai_p4/instantiations/google:unioned_p4info.pb.txt",
    tools = [
        "//p4_pdpi:p4info_union",
        "//sai_p4/instantiations/google:middleblock.p4info.pb.txt",
        "//sai_p4/instantiations/google:wbb.p4info.pb.txt",
    ],
)

# Only for testing and updating the PD proto when the P4 program changes.
p4_pd_proto(
    name = "generated_sai_pd",
    src = "unioned_p4info.pb.txt",
    # Do not access directly. Use checked in sai_pd.proto instead.
    out = "generated/sai_pd.proto",
    package = "sai",
    roles = ["sdn_controller"],
)

# Linkqual uses only a single table which is present in middleblock.p4.
p4_pd_proto(
    name = "generated_linkqual_pd",
    src =
        "middleblock.p4info.pb.txt",
    # Do not access directly. Use checked in linkqual_pd.proto instead.
    out = "generated/linkqual_pd.proto",
    package = "linkqual",
    roles = ["linkqual_app"],
)

# -- P4Info --------------------------------------------------------------------

# The P4Info proto, in C++ format.
cc_library(
    name = "sai_p4info_cc",
    srcs = ["sai_p4info.cc"],
    hdrs = ["sai_p4info.h"],
    deps = [
        ":instantiations",
        ":middleblock_p4info_embed",
        ":unioned_p4info_embed",
        ":wbb_p4info_embed",
        "//p4_pdpi:ir",
        "//p4_pdpi:ir_cc_proto",
        "//p4_pdpi:p4info_union_lib",
        "@com_github_google_glog//:glog",
        "@com_github_p4lang_p4runtime//:p4info_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "instantiations",
    hdrs = ["instantiations.h"],
    deps = [
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

# Ensures that the checked in and compile-time generated P4Infos match.
# To update the checked in P4Info:
#   blaze run :middleblock_p4info_up_to_date_test -- --update
diff_test(
    name = "middleblock_p4info_up_to_date_test",
    actual = "generated/middleblock.p4info.pb.txt",  # Generated.
    expected = "middleblock.p4info.pb.txt",  # Checked in.
)

diff_test(
    name = "wbb_p4info_up_to_date_test",
    actual = "generated/wbb.p4info.pb.txt",  # Generated.
    expected = "wbb.p4info.pb.txt",  # Checked in.
)

# Auxiliary targets, see go/totw/128.
cc_embed_data(
    name = "middleblock_p4info_embed",
    srcs = [
        "middleblock.p4info.pb.txt",
    ],
    cc_file_output = "middleblock_p4info_embed.cc",
    cpp_namespace = "sai",
    h_file_output = "middleblock_p4info_embed.h",
)

cc_embed_data(
    name = "wbb_p4info_embed",
    srcs = [
        "wbb.p4info.pb.txt",
    ],
    cc_file_output = "wbb_p4info_embed.cc",
    cpp_namespace = "sai",
    h_file_output = "wbb_p4info_embed.h",
)

cc_embed_data(
    name = "unioned_p4info_embed",
    srcs = [
        "unioned_p4info.pb.txt",
    ],
    cc_file_output = "unioned_p4info_embed.cc",
    cpp_namespace = "sai",
    h_file_output = "unioned_p4info_embed.h",
)

cc_test(
    name = "sai_p4info_test",
    srcs = ["sai_p4info_test.cc"],
    deps = [
        ":sai_p4info_cc",
        "//gutil:status_matchers",
        "@com_github_p4lang_p4_constraints//p4_constraints/backend:constraint_info",
        "@com_github_p4lang_p4runtime//:p4info_cc_proto",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
        "@com_google_absl//absl/types:variant",
        "@com_google_googletest//:gtest_main",
    ],
)

# -- P4 program ----------------------------------------------------------------

MIDDLEBLOCK_DEPS = [
    "acl_ingress.p4",
    "acl_linkqual.p4",
    "acl_lookup.p4",
    "hashing.p4",
    "ids.h",
    "roles.h",
    "bitwidths.p4",
    "minimum_guaranteed_sizes.p4",
    "//sai_p4/fixed",
]

WBB_DEPS = [
    "acl_wbb_ingress.p4",
    "hashing.p4",
    "ids.h",
    "roles.h",
    "bitwidths.p4",
    "minimum_guaranteed_sizes.p4",
    "//sai_p4/fixed",
]

p4_library(
    name = "middleblock",
    src = "middleblock.p4",
    # Do not access directly. Use checked in sai.p4info.pb.txt instead.
    p4info_out = "generated/middleblock.p4info.pb.txt",
    deps = MIDDLEBLOCK_DEPS,
)

p4_library(
    name = "wbb",
    src = "wbb.p4",
    # Do not access directly. Use checked in wbb.p4info.pb.txt instead.
    p4info_out = "generated/wbb.p4info.pb.txt",
    deps = WBB_DEPS,
)

cc_library(
    name = "p4_ids",
    hdrs = ["ids.h"],
    deps = [
        "//sai_p4/fixed:p4_ids",
    ],
)

cc_library(
    name = "p4_roles",
    hdrs = ["roles.h"],
)

# -- Non-standard platforms ----------------------------------------------------

NONSTANDARD_PLATFORMS = [
    # (<name>, <macro>)
    ("bmv2", "PLATFORM_BMV2"),
    ("p4_symbolic", "PLATFORM_P4SYMBOLIC"),
]

ROLES = [
    # (<name>, <dependencies>)
    ("middleblock", MIDDLEBLOCK_DEPS),
    ("wbb", WBB_DEPS),
]

[
    p4_library(
        name = "sai_%s_%s" % (role, platform_name),
        src = "%s.p4" % role,
        extra_args = "-D%s" % platform_macro,
        p4info_out = "generated/sai_%s_%s.p4info.pb.txt" % (role, platform_name),
        target = "bmv2",
        target_out = "generated/sai_%s_%s.config.json" % (role, platform_name),
        deps = deps,
    )
    for (role, deps) in ROLES
    for (platform_name, platform_macro) in NONSTANDARD_PLATFORMS
]

build_test(
    name = "sai_nonstandard_platforms_build_test",
    targets = [
        ":sai_%s_%s" % (role, platform)
        for (role, _) in ROLES
        for (platform, _) in NONSTANDARD_PLATFORMS
    ],
)

# P4 info and config for non-standard platforms, accessible via C++ API.
cc_library(
    name = "sai_nonstandard_platforms_cc",
    srcs = ["sai_nonstandard_platforms.cc"],
    hdrs = ["sai_nonstandard_platforms.h"],
    deps = [
        ":instantiations",
        ":sai_nonstandard_platforms_embed",
        "//p4_pdpi:ir_cc_proto",
        "@com_github_google_glog//:glog",
        "@com_github_p4lang_p4runtime//:p4info_cc_proto",
        "@com_github_p4lang_p4runtime//:p4runtime_cc_proto",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_protobuf//:protobuf",
    ],
)

# Auxiliary target, see go/totw/128.
cc_embed_data(
    name = "sai_nonstandard_platforms_embed",
    srcs = [
        "generated/sai_%s_%s.%s" % (role, platform, extension)
        for (role, _) in ROLES
        for (platform, _) in NONSTANDARD_PLATFORMS
        for extension in [
            "config.json",
            "p4info.pb.txt",
        ]
    ],
    cc_file_output = "sai_nonstandard_platforms_embed.cc",
    cpp_namespace = "sai",
    flatten = True,
    h_file_output = "sai_nonstandard_platforms_embed.h",
)

cc_test(
    name = "sai_nonstandard_platforms_cc_test",
    srcs = ["sai_nonstandard_platforms_test.cc"],
    deps = [
        ":instantiations",
        ":sai_nonstandard_platforms_cc",
        "//gutil:status_matchers",
        "//thinkit:bazel_test_environment",
        "@com_github_p4lang_p4runtime//:p4info_cc_proto",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_googletest//:gtest_main",
    ],
)
