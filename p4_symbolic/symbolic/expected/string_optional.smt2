; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun scalars.userMetadata.string_field () (_ BitVec 9))
(assert
 (let (($x85 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x80 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x86 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x80) $x85)))
 (and (and (distinct standard_metadata.ingress_port (_ bv511 9)) true) $x86)))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (or $x51 (or (or (or false (= ?x77 (_ bv0 9))) (= ?x77 (_ bv1 9))) (= ?x77 (_ bv2 9)))))))))))))))))))))
(assert
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x36 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv1 1))))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let ((?x56 (ite (and (and true (and $x43 (not $x36))) $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let (($x66 (and true $x65)))
 (let ((?x76 (ite $x66 0 (ite (and true true) 1 (- 1)))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (and (and (not $x51) true) (= ?x76 (- 1))))))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun scalars.userMetadata.string_field () (_ BitVec 9))
(assert
 (let (($x85 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x80 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x86 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x80) $x85)))
 (and (and (distinct standard_metadata.ingress_port (_ bv511 9)) true) $x86)))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (or $x51 (or (or (or false (= ?x77 (_ bv0 9))) (= ?x77 (_ bv1 9))) (= ?x77 (_ bv2 9)))))))))))))))))))))
(assert
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x36 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv1 1))))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let ((?x56 (ite (and (and true (and $x43 (not $x36))) $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let (($x66 (and true $x65)))
 (let ((?x76 (ite $x66 0 (ite (and true true) 1 (- 1)))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (let (($x144 (and (not $x51) true)))
 (and $x144 (= ?x76 0))))))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun scalars.userMetadata.string_field () (_ BitVec 9))
(assert
 (let (($x85 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x80 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x86 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x80) $x85)))
 (and (and (distinct standard_metadata.ingress_port (_ bv511 9)) true) $x86)))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (or $x51 (or (or (or false (= ?x77 (_ bv0 9))) (= ?x77 (_ bv1 9))) (= ?x77 (_ bv2 9)))))))))))))))))))))
(assert
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x36 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv1 1))))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let ((?x56 (ite (and (and true (and $x43 (not $x36))) $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let (($x66 (and true $x65)))
 (let ((?x76 (ite $x66 0 (ite (and true true) 1 (- 1)))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (and (and (not $x51) true) (= ?x76 1)))))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun scalars.userMetadata.string_field () (_ BitVec 9))
(assert
 (let (($x85 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x80 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x86 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x80) $x85)))
 (and (and (distinct standard_metadata.ingress_port (_ bv511 9)) true) $x86)))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (or $x51 (or (or (or false (= ?x77 (_ bv0 9))) (= ?x77 (_ bv1 9))) (= ?x77 (_ bv2 9)))))))))))))))))))))
(assert
 (let (($x41 (and true (= standard_metadata.ingress_port (concat (_ bv0 7) (_ bv2 2))))))
 (let (($x36 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv1 1))))))
 (let (($x32 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1))))))
 (let (($x42 (and true $x32)))
 (let ((?x62 (ite $x42 0 (ite (and true $x36) 1 (ite (and true $x41) 2 (- 1))))))
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let ((?x56 (ite (and (and true (and (not $x32) (not $x36))) $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true (not $x32)) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (and (and (not $x51) true) (= ?x62 (- 1)))))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun scalars.userMetadata.string_field () (_ BitVec 9))
(assert
 (let (($x85 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x80 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x86 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x80) $x85)))
 (and (and (distinct standard_metadata.ingress_port (_ bv511 9)) true) $x86)))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (or $x51 (or (or (or false (= ?x77 (_ bv0 9))) (= ?x77 (_ bv1 9))) (= ?x77 (_ bv2 9)))))))))))))))))))))
(assert
 (let (($x41 (and true (= standard_metadata.ingress_port (concat (_ bv0 7) (_ bv2 2))))))
 (let (($x36 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv1 1))))))
 (let (($x32 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1))))))
 (let (($x42 (and true $x32)))
 (let ((?x62 (ite $x42 0 (ite (and true $x36) 1 (ite (and true $x41) 2 (- 1))))))
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let ((?x56 (ite (and (and true (and (not $x32) (not $x36))) $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true (not $x32)) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (let (($x144 (and (not $x51) true)))
 (and $x144 (= ?x62 0)))))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun scalars.userMetadata.string_field () (_ BitVec 9))
(assert
 (let (($x85 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x80 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x86 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x80) $x85)))
 (and (and (distinct standard_metadata.ingress_port (_ bv511 9)) true) $x86)))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (or $x51 (or (or (or false (= ?x77 (_ bv0 9))) (= ?x77 (_ bv1 9))) (= ?x77 (_ bv2 9)))))))))))))))))))))
(assert
 (let (($x41 (and true (= standard_metadata.ingress_port (concat (_ bv0 7) (_ bv2 2))))))
 (let (($x36 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv1 1))))))
 (let (($x32 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1))))))
 (let (($x42 (and true $x32)))
 (let ((?x62 (ite $x42 0 (ite (and true $x36) 1 (ite (and true $x41) 2 (- 1))))))
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let ((?x56 (ite (and (and true (and (not $x32) (not $x36))) $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true (not $x32)) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (and (and (not $x51) true) (= ?x62 1))))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun scalars.userMetadata.string_field () (_ BitVec 9))
(assert
 (let (($x85 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x80 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x86 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x80) $x85)))
 (and (and (distinct standard_metadata.ingress_port (_ bv511 9)) true) $x86)))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (or $x51 (or (or (or false (= ?x77 (_ bv0 9))) (= ?x77 (_ bv1 9))) (= ?x77 (_ bv2 9)))))))))))))))))))))
(assert
 (let (($x41 (and true (= standard_metadata.ingress_port (concat (_ bv0 7) (_ bv2 2))))))
 (let (($x36 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv1 1))))))
 (let (($x32 (and true (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1))))))
 (let (($x42 (and true $x32)))
 (let ((?x62 (ite $x42 0 (ite (and true $x36) 1 (ite (and true $x41) 2 (- 1))))))
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let ((?x56 (ite (and (and true (and (not $x32) (not $x36))) $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true (not $x32)) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (and (and (not $x51) true) (= ?x62 2))))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun scalars.userMetadata.string_field () (_ BitVec 9))
(assert
 (let (($x85 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x80 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x86 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x80) $x85)))
 (and (and (distinct standard_metadata.ingress_port (_ bv511 9)) true) $x86)))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (or $x51 (or (or (or false (= ?x77 (_ bv0 9))) (= ?x77 (_ bv1 9))) (= ?x77 (_ bv2 9)))))))))))))))))))))
(assert
 (let ((?x34 (concat (_ bv0 8) (_ bv1 1))))
 (let ((?x39 (concat (_ bv0 7) (_ bv2 2))))
 (let ((?x29 (concat (_ bv0 8) (_ bv0 1))))
 (let (($x41 (and true (= standard_metadata.ingress_port ?x39))))
 (let (($x32 (and true (= standard_metadata.ingress_port ?x29))))
 (let (($x43 (not $x32)))
 (let (($x48 (and true (and $x43 (not (and true (= standard_metadata.ingress_port ?x34)))))))
 (let ((?x56 (ite (and $x48 $x41) ?x29 (ite true ?x29 scalars.userMetadata.string_field))))
 (let (($x36 (and true (= standard_metadata.ingress_port ?x34))))
 (let (($x42 (and true $x32)))
 (let ((?x63 (ite $x42 ?x39 (ite (and (and true $x43) $x36) ?x34 ?x56))))
 (let (($x65 (and true (= ?x63 ?x39))))
 (let ((?x75 (ite (and (and true (not $x65)) true) ?x34 standard_metadata.egress_spec)))
 (let (($x66 (and true $x65)))
 (let ((?x77 (ite $x66 ?x29 ?x75)))
 (let (($x51 (= ?x77 (_ bv511 9))))
 (and (and (not $x51) true) (= (- 1) (- 1))))))))))))))))))))
(check-sat)

